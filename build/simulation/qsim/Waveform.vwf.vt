// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/24/2019 17:47:13"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          SingleClock
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SingleClock_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] instruction;
reg load;
reg [31:0] pc_load;
reg reset;
// wires                                               
wire pin_name6;

// assign statements (if any)                          
SingleClock i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.instruction(instruction),
	.load(load),
	.pc_load(pc_load),
	.pin_name6(pin_name6),
	.reset(reset)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// load
initial
begin
	load = 1'b0;
end 
// instruction[ 7 ]
initial
begin
	instruction[7] = 1'b0;
end 
// instruction[ 6 ]
initial
begin
	instruction[6] = 1'b0;
end 
// instruction[ 5 ]
initial
begin
	instruction[5] = 1'b0;
end 
// instruction[ 4 ]
initial
begin
	instruction[4] = 1'b0;
end 
// instruction[ 3 ]
initial
begin
	instruction[3] = 1'b0;
end 
// instruction[ 2 ]
initial
begin
	instruction[2] = 1'b0;
end 
// instruction[ 1 ]
initial
begin
	instruction[1] = 1'b1;
end 
// instruction[ 0 ]
initial
begin
	instruction[0] = 1'b0;
end 
// pc_load[ 31 ]
initial
begin
	pc_load[31] = 1'b0;
end 
// pc_load[ 30 ]
initial
begin
	pc_load[30] = 1'b0;
end 
// pc_load[ 29 ]
initial
begin
	pc_load[29] = 1'b0;
end 
// pc_load[ 28 ]
initial
begin
	pc_load[28] = 1'b0;
end 
// pc_load[ 27 ]
initial
begin
	pc_load[27] = 1'b0;
end 
// pc_load[ 26 ]
initial
begin
	pc_load[26] = 1'b0;
end 
// pc_load[ 25 ]
initial
begin
	pc_load[25] = 1'b0;
end 
// pc_load[ 24 ]
initial
begin
	pc_load[24] = 1'b0;
end 
// pc_load[ 23 ]
initial
begin
	pc_load[23] = 1'b0;
end 
// pc_load[ 22 ]
initial
begin
	pc_load[22] = 1'b0;
end 
// pc_load[ 21 ]
initial
begin
	pc_load[21] = 1'b0;
end 
// pc_load[ 20 ]
initial
begin
	pc_load[20] = 1'b0;
end 
// pc_load[ 19 ]
initial
begin
	pc_load[19] = 1'b0;
end 
// pc_load[ 18 ]
initial
begin
	pc_load[18] = 1'b0;
end 
// pc_load[ 17 ]
initial
begin
	pc_load[17] = 1'b0;
end 
// pc_load[ 16 ]
initial
begin
	pc_load[16] = 1'b0;
end 
// pc_load[ 15 ]
initial
begin
	pc_load[15] = 1'b0;
end 
// pc_load[ 14 ]
initial
begin
	pc_load[14] = 1'b0;
end 
// pc_load[ 13 ]
initial
begin
	pc_load[13] = 1'b0;
end 
// pc_load[ 12 ]
initial
begin
	pc_load[12] = 1'b0;
end 
// pc_load[ 11 ]
initial
begin
	pc_load[11] = 1'b0;
end 
// pc_load[ 10 ]
initial
begin
	pc_load[10] = 1'b0;
end 
// pc_load[ 9 ]
initial
begin
	pc_load[9] = 1'b0;
end 
// pc_load[ 8 ]
initial
begin
	pc_load[8] = 1'b0;
end 
// pc_load[ 7 ]
initial
begin
	pc_load[7] = 1'b0;
end 
// pc_load[ 6 ]
initial
begin
	pc_load[6] = 1'b0;
end 
// pc_load[ 5 ]
initial
begin
	pc_load[5] = 1'b0;
end 
// pc_load[ 4 ]
initial
begin
	pc_load[4] = 1'b0;
end 
// pc_load[ 3 ]
initial
begin
	pc_load[3] = 1'b0;
end 
// pc_load[ 2 ]
initial
begin
	pc_load[2] = 1'b0;
end 
// pc_load[ 1 ]
initial
begin
	pc_load[1] = 1'b0;
end 
// pc_load[ 0 ]
initial
begin
	pc_load[0] = 1'b0;
end 
endmodule

